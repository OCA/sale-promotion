# Copyright 2022 Ooops404
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import ast

from odoo import _, api, fields, models


class CouponProgram(models.Model):
    _inherit = "coupon.program"

    rule_order_domain = fields.Char(
        string="Based on Order",
        help="Coupon program will work for the order with selected domain only",
    )

    def _is_valid_order(self, order):
        """
        Check that we can apply the coupon for current order
        """
        if self.rule_order_domain and self.rule_order_domain != "[]":
            domain = ast.literal_eval(self.rule_order_domain)
            return bool(order.filtered_domain(domain))
        else:
            return True

    def _check_promo_code(self, order, coupon_code):
        message = super()._check_promo_code(order, coupon_code)
        if not self._is_valid_order(order):
            message = {"error": _("The order doesn't have access to this reward.")}
        return message

    @api.model
    def _filter_programs_from_common_rules(self, order, next_order=False):
        programs = super()._filter_programs_from_common_rules(
            order, next_order=next_order
        )

        # Order requirement should not be checked if the coupon got generated by
        # a promotion program
        # (the requirement should have only be checked to generate the coupon)
        if not next_order and programs:
            programs = programs._filter_programs_on_order(order)

        programs_curr_order = programs.filtered(
            lambda p: p.promo_applicability == "on_current_order"
        )
        programs = programs.filtered(lambda p: p.promo_applicability == "on_next_order")
        if programs_curr_order:
            # Checking if rewards are in the SO should not be performed for
            # rewards on_next_order
            programs += programs_curr_order._filter_not_ordered_reward_programs(order)
        return programs

    def _filter_programs_on_order(self, order):
        """
        Filter all programs by order based domain
        """
        return self.filtered(lambda program: program._is_valid_order(order))
